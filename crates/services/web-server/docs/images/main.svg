<?xml version="1.0" encoding="UTF-8"?>
<svg width="1000" height="800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .bg { fill: #2f2f2f; }
      .arrow-fill { fill: #AAA; }
      .stroke-primary { stroke: #AAA; stroke-width: 2; fill: none; }
      .stroke-dashed { stroke: #AAA; stroke-width: 1.5; stroke-dasharray: 5,5; fill: none; }
      .line-primary { stroke: #AAA; stroke-width: 2; }
      .text-title { font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-section { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-box-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-code { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; }
      .text-small { font-family: Arial, sans-serif; font-size: 10px; fill: white; text-anchor: middle; }
      .rect-layer { fill: #3D3D3D; }
      .rect-sublayer { fill: #4D4D4D; }
      .rect-process { fill: #5D5D5D; }
      .rect-error { fill: #6D3D3D; }
      .rect-data { fill: #3D5D3D; }
      .rect-extractor { fill: #3D3D5D; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" class="arrow-fill" />
    </marker>
  </defs>
  <rect width="1000" height="800" class="bg" x="2" y="1" />

  <!-- Main Application Entry Point -->
  <rect x="30" y="30" width="940" height="150" rx="5" class="stroke-primary rect-layer" />
  <text x="500" y="60" class="text-title">Web Server Main - Application Entry Point &amp; Router Setup</text>
  <text x="500" y="90" class="text-code">main.rs - tokio::main async fn main() -&gt; Result&lt;()&gt;</text>
  <text x="500" y="110" class="text-small">Initializes logging, dev utils, ModelManager, routes, and starts server</text>
  <text x="500" y="130" class="text-small">Dependencies: axum, lib-web middleware, lib-core model</text>
  <text x="500" y="150" class="text-small">Binds to 127.0.0.1:8080</text>

  <!-- Initialization Phase -->
  <rect x="50" y="220" width="280" height="140" rx="5" class="stroke-primary rect-data" />
  <text x="190" y="250" class="text-section">Initialization Phase</text>
  <text x="190" y="275" class="text-code">tracing_subscriber::fmt().init()</text>
  <text x="190" y="295" class="text-code">_dev_utils::init_dev().await</text>
  <text x="190" y="315" class="text-code">ModelManager::new().await?</text>
  <text x="190" y="335" class="text-small">Sets up logging, dev environment, database</text>

  <!-- Route Definition -->
  <rect x="360" y="220" width="280" height="140" rx="5" class="stroke-primary rect-process" />
  <text x="500" y="250" class="text-section">Route Definition</text>
  <text x="500" y="275" class="text-code">routes_rpc = web::routes_rpc::routes(mm)</text>
  <text x="500" y="295" class="text-code">.route_layer(mw_ctx_require)</text>
  <text x="500" y="315" class="text-small">RPC routes with required authentication</text>
  <text x="500" y="335" class="text-small">Protected API endpoints</text>

  <!-- Router Assembly -->
  <rect x="670" y="220" width="280" height="140" rx="5" class="stroke-primary rect-sublayer" />
  <text x="810" y="250" class="text-section">Router Assembly</text>
  <text x="810" y="275" class="text-code">Router::new().merge(routes_login)</text>
  <text x="810" y="295" class="text-code">.nest(&quot;/api&quot;, routes_rpc)</text>
  <text x="810" y="315" class="text-small">Combines login &amp; API routes</text>
  <text x="810" y="335" class="text-small">Nested under /api prefix</text>

  <!-- Middleware Stack -->
  <rect x="50" y="400" width="900" height="180" rx="5" class="stroke-primary rect-layer" />
  <text x="500" y="430" class="text-section">Middleware Layer Stack (Applied in Reverse Order)</text>

  <!-- Individual Middleware Layers -->
  <rect x="80" y="450" width="160" height="80" rx="3" class="stroke-primary rect-process" />
  <text x="160" y="475" class="text-box-title">Response Mapping</text>
  <text x="160" y="495" class="text-code">mw_response_map</text>
  <text x="160" y="510" class="text-small">Error handling &amp; logging</text>

  <rect x="260" y="450" width="160" height="80" rx="3" class="stroke-primary rect-process" />
  <text x="340" y="475" class="text-box-title">Context Resolver</text>
  <text x="340" y="495" class="text-code">mw_ctx_resolver</text>
  <text x="340" y="510" class="text-small">Authentication context</text>

  <rect x="440" y="450" width="160" height="80" rx="3" class="stroke-primary rect-process" />
  <text x="520" y="475" class="text-box-title">Cookie Manager</text>
  <text x="520" y="495" class="text-code">CookieManagerLayer</text>
  <text x="520" y="510" class="text-small">Session management</text>

  <rect x="620" y="450" width="160" height="80" rx="3" class="stroke-primary rect-process" />
  <text x="700" y="475" class="text-box-title">Request Stamping</text>
  <text x="700" y="495" class="text-code">mw_req_stamp_resolver</text>
  <text x="700" y="510" class="text-small">Request tracking</text>

  <rect x="800" y="450" width="120" height="80" rx="3" class="stroke-primary rect-data" />
  <text x="860" y="475" class="text-box-title">Static Files</text>
  <text x="860" y="495" class="text-code">routes_static</text>
  <text x="860" y="510" class="text-small">Fallback service</text>

  <!-- Server Startup -->
  <rect x="200" y="620" width="600" height="120" rx="5" class="stroke-primary rect-data" />
  <text x="500" y="650" class="text-section">Server Startup</text>
  <text x="500" y="675" class="text-code">TcpListener::bind(&quot;127.0.0.1:8080&quot;).await</text>
  <text x="500" y="695" class="text-code">axum::serve(listener, routes_all.into_make_service())</text>
  <text x="500" y="715" class="text-small">Starts HTTP server on localhost:8080</text>

  <!-- Flow Arrows -->
  <!-- Initialization to Route Definition -->
  <line x1="190" y1="180" x2="190" y2="218" class="line-primary" marker-end="url(#arrowhead)" />

  <!-- Route flows -->
  <line x1="330" y1="290" x2="358" y2="290" class="line-primary" marker-end="url(#arrowhead)" />
  <line x1="640" y1="290" x2="668" y2="290" class="line-primary" marker-end="url(#arrowhead)" />

  <!-- To middleware stack -->
  <line x1="820" y1="360" x2="820" y2="398" class="line-primary" marker-end="url(#arrowhead)" />

  <!-- To server startup -->
  <line x1="500" y1="580" x2="500" y2="618" class="line-primary" marker-end="url(#arrowhead)" />

  <!-- Middleware flow arrows (showing reverse application order) -->
  <line x1="240" y1="490" x2="258" y2="490" class="line-primary" marker-end="url(#arrowhead)" />
  <line x1="420" y1="490" x2="438" y2="490" class="line-primary" marker-end="url(#arrowhead)" />
  <line x1="600" y1="490" x2="618" y2="490" class="line-primary" marker-end="url(#arrowhead)" />
  <line x1="780" y1="490" x2="798" y2="490" class="line-primary" marker-end="url(#arrowhead)" />
</svg>

<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .bg { fill: #2f2f2f; }
      .arrow-fill { fill: #AAA; }
      .stroke-primary { stroke: #AAA; stroke-width: 2; fill: none; }
      .stroke-dashed { stroke: #AAA; stroke-width: 1; stroke-dasharray: 5,5; fill: none; }
      .line-primary { stroke: #AAA; stroke-width: 2; }
      .text-title { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-section { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-box-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-feature-title { font-family: Arial, sans-serif; font-size: 12px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-code { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; }
      .text-small { font-family: Arial, sans-serif; font-size: 10px; fill: white; text-anchor: middle; }
      .text-note { font-family: Arial, sans-serif; font-size: 12px; font-style: italic; fill: white; text-anchor: middle; }
      .text-note-sm { font-family: Arial, sans-serif; font-size: 10px; fill: white; text-anchor: middle; }
      .text-note-box { fill: none; stroke: #AAA; stroke-width: 1; stroke-dasharray: 5,5 }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7"
     refX="10" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" class="arrow-fill" />
    </marker>
  </defs>

  <rect width="800" height="600" class="bg"/>

  <!-- Title -->
  <text x="400" y="30" class="text-title">
    RPC Result Module Flow
  </text>

  <!-- Input Data Box -->
  <rect x="50" y="80" width="150" height="80" rx="5" class="stroke-primary"/>
  <text x="125" y="110" class="text-box-title">
    Input Data
  </text>
  <text x="125" y="130" class="text-code">
    T: Serialize
  </text>

  <!-- Arrow from Input to From Implementation -->
  <line x1="200" y1="120" x2="280" y2="120" class="line-primary" marker-end="url(#arrowhead)"/>

  <!-- From Implementation Box -->
  <rect x="300" y="80" width="200" height="80" rx="5" class="stroke-primary"/>
  <text x="400" y="105" class="text-box-title">
    From&lt;T&gt; Implementation
  </text>
  <text x="400" y="125" class="text-code">
    fn from(val: T) -&gt; Self
  </text>
  <text x="400" y="145" class="text-code">
    { data: val }
  </text>

  <!-- Arrow from From Implementation to DataRpcResult -->
  <line x1="500" y1="120" x2="580" y2="120" class="line-primary" marker-end="url(#arrowhead)"/>

  <!-- DataRpcResult Box -->
  <rect x="600" y="60" width="150" height="120" rx="5" class="stroke-primary"/>
  <text x="675" y="85" class="text-box-title">
    DataRpcResult&lt;T&gt;
  </text>
  <text x="675" y="105" class="text-code">
    struct {
  </text>
  <text x="675" y="125" class="text-code">
    data: T
  </text>
  <text x="675" y="145" class="text-code">
    }
  </text>
  <text x="675" y="165" class="text-small">
    #[derive(Serialize)]
  </text>

  <!-- JSON-RPC Response Flow -->
  <text x="400" y="220" class="text-section">
    JSON-RPC Response Normalization
  </text>

  <!-- Raw Data -->
  <rect x="100" y="250" width="120" height="60" rx="5" class="stroke-primary"/>
  <text x="160" y="270" class="text-feature-title">
    Raw Data
  </text>
  <text x="160" y="290" class="text-small">
    User{id: 1, name: "John"}
  </text>

  <!-- Arrow -->
  <line x1="220" y1="280" x2="280" y2="280" class="line-primary" marker-end="url(#arrowhead)"/>
  <text x="250" y="275" class="text-small">.into()</text>

  <!-- Wrapped Data -->
  <rect x="300" y="250" width="200" height="60" rx="5" class="stroke-primary"/>
  <text x="400" y="270" class="text-feature-title">
    DataRpcResult&lt;User&gt;
  </text>
  <text x="400" y="290" class="text-small">
    { data: User{id: 1, name: "John"} }
  </text>

  <!-- Arrow -->
  <line x1="500" y1="280" x2="560" y2="280" class="line-primary" marker-end="url(#arrowhead)"/>
  <text x="530" y="275" class="text-small">serialize</text>

  <!-- JSON Output -->
  <rect x="580" y="240" width="180" height="80" rx="5" class="stroke-primary"/>
  <text x="670" y="260" class="text-feature-title">
    JSON-RPC .result
  </text>
  <text x="670" y="280" class="text-small">

  </text>
  <text x="670" y="295" class="text-small">
    "data": {
  </text>
  <text x="670" y="310" class="text-small">
    "id": 1, "name": "John" }
  </text>

  <!-- Key Features -->
  <text x="400" y="380" class="text-section">
    Key Features
  </text>

  <!-- Feature boxes -->
  <rect x="80" y="400" width="160" height="100" rx="5" class="stroke-primary"/>
  <text x="160" y="420" class="text-feature-title">
    Generic Design
  </text>
  <text x="160" y="440" class="text-small">
    Works with any type T
  </text>
  <text x="160" y="455" class="text-small">
    that implements
  </text>
  <text x="160" y="470" class="text-small">
    Serialize trait
  </text>
  <text x="160" y="485" class="text-small">
    (from serde)
  </text>

  <rect x="320" y="400" width="160" height="100" rx="5" class="stroke-primary"/>
  <text x="400" y="420" class="text-feature-title">
    Easy Conversion
  </text>
  <text x="400" y="440" class="text-small">
    From&lt;T&gt; trait enables
  </text>
  <text x="400" y="455" class="text-small">
    automatic conversion
  </text>
  <text x="400" y="470" class="text-small">
    using .into() or
  </text>
  <text x="400" y="485" class="text-small">
    DataRpcResult::from()
  </text>

  <rect x="560" y="400" width="160" height="100" rx="5" class="stroke-primary"/>
  <text x="640" y="420" class="text-feature-title">
    JSON-RPC Standard
  </text>
  <text x="640" y="440" class="text-small">
    Normalizes response
  </text>
  <text x="640" y="455" class="text-small">
    format for consistent
  </text>
  <text x="640" y="470" class="text-small">
    JSON-RPC .result
  </text>
  <text x="640" y="485" class="text-small">
    property structure
  </text>

  <!-- Future Extensions Note -->
  <rect x="150" y="530" width="500" height="50" rx="5" class="text-note-box"/>
  <text x="400" y="550" class="text-note">
    Future: May include metadata like pagination info for list responses
  </text>
  <text x="400" y="565" class="text-note-sm">
    Note: Despite the name "Result", this is not a Rust Result&lt;T,E&gt; type
  </text>
</svg>

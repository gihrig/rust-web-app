<?xml version="1.0" encoding="UTF-8"?>
<svg width="920" height="900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .bg { fill: #2f2f2f; }
      .arrow-fill { fill: #AAA; }
      .stroke-primary { stroke: #AAA; stroke-width: 2; fill: none; }
      .stroke-dashed { stroke: #AAA; stroke-width: 1.5; stroke-dasharray: 5,5; fill: none; }
      .line-primary { stroke: #AAA; stroke-width: 2; }
      .text-title { font-family: Arial, sans-serif; font-size: 18px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-section { font-family: Arial, sans-serif; font-size: 16px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-box-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: white; text-anchor: middle; }
      .text-code { font-family: Arial, sans-serif; font-size: 12px; fill: white; text-anchor: middle; }
      .text-small { font-family: Arial, sans-serif; font-size: 10px; fill: white; text-anchor: middle; }
      .rect-layer { fill: #3D3D3D; }
      .rect-sublayer { fill: #4D4D4D; }
      .rect-process { fill: #5D5D5D; }
      .rect-data { fill: #4D6D4D; }
      .rect-timing { fill: #6D4D6D; }
    </style>
    <marker id="arrowhead" markerWidth="10" markerHeight="7"
     refX="10" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" class="arrow-fill" />
    </marker>
  </defs>

  <rect width="920" height="900" class="bg"/>

  <!-- Function Entry -->
  <rect x="20" y="30" width="880" height="50" rx="5" class="stroke-primary rect-layer"/>
  <text x="460" y="60" class="text-title">log_request Function Entry</text>

  <!-- Input Parameters Section -->
  <rect x="20" y="100" width="880" height="80" rx="5" class="stroke-primary rect-layer"/>
  <text x="460" y="125" class="text-section">Input Parameters Collection</text>
  <text x="130" y="145" class="text-code">http_method: Method</text>
  <text x="300" y="145" class="text-code">uri: Uri</text>
  <text x="450" y="145" class="text-code">req_stamp: ReqStamp</text>
  <text x="130" y="165" class="text-code">rpc_info: Option&lt;&amp;RpcInfo&gt;</text>
  <text x="300" y="165" class="text-code">ctx: Option&lt;Ctx&gt;</text>
  <text x="600" y="145" class="text-code">web_error: Option&lt;&amp;Error&gt;</text>
  <text x="750" y="145" class="text-code">client_error: Option&lt;ClientError&gt;</text>

  <!-- Error Processing Section -->
  <rect x="50" y="220" width="400" height="80" rx="5" class="stroke-primary rect-sublayer"/>
  <text x="250" y="245" class="text-box-title">Error Information Processing</text>
  <text x="150" y="265" class="text-code">Extract error_type</text>
  <text x="350" y="265" class="text-code">Serialize error_data</text>
  <text x="250" y="285" class="text-small">Safe JSON extraction from Error.data field</text>

  <!-- Request Timing Section -->
  <rect x="470" y="220" width="400" height="80" rx="5" class="stroke-primary rect-timing"/>
  <text x="670" y="245" class="text-box-title">Request Timing Calculation</text>
  <text x="570" y="265" class="text-code">Extract UUID &amp; time_in</text>
  <text x="770" y="265" class="text-code">Calculate duration_ms</text>
  <text x="670" y="285" class="text-small">Microsecond precision: (seconds * 1M).floor() / 1K</text>

  <!-- RequestLogLine Construction -->
  <rect x="20" y="340" width="880" height="120" rx="5" class="stroke-primary rect-process"/>
  <text x="460" y="365" class="text-section">RequestLogLine Structure Assembly</text>
  <text x="130" y="385" class="text-code">uuid: String</text>
  <text x="280" y="385" class="text-code">timestamp: String</text>
  <text x="430" y="385" class="text-code">time_in: String</text>
  <text x="580" y="385" class="text-code">duration_ms: f64</text>
  <text x="730" y="385" class="text-code">user_id: Option&lt;i64&gt;</text>
  <text x="130" y="405" class="text-code">http_path: String</text>
  <text x="280" y="405" class="text-code">http_method: String</text>
  <text x="430" y="405" class="text-code">rpc_id: Option&lt;String&gt;</text>
  <text x="580" y="405" class="text-code">rpc_method: Option&lt;String&gt;</text>
  <text x="130" y="425" class="text-code">client_error_type: Option&lt;String&gt;</text>
  <text x="350" y="425" class="text-code">error_type: Option&lt;String&gt;</text>
  <text x="580" y="425" class="text-code">error_data: Option&lt;Value&gt;</text>
  <text x="460" y="445" class="text-small">All fields with #[skip_serializing_none] for clean JSON</text>

  <!-- Context Data Extraction -->
  <rect x="50" y="500" width="200" height="60" rx="5" class="stroke-primary rect-data"/>
  <text x="150" y="525" class="text-box-title">Context Processing</text>
  <text x="150" y="545" class="text-code">ctx.map(|c| c.user_id())</text>

  <!-- RPC Data Extraction -->
  <rect x="270" y="500" width="200" height="60" rx="5" class="stroke-primary rect-data"/>
  <text x="370" y="520" class="text-box-title">RPC Info Processing</text>
  <text x="370" y="535" class="text-code">rpc_info.id.to_string()</text>
  <text x="370" y="550" class="text-code">rpc_info.method.to_string()</text>

  <!-- HTTP Data Processing -->
  <rect x="490" y="500" width="200" height="60" rx="5" class="stroke-primary rect-data"/>
  <text x="590" y="520" class="text-box-title">HTTP Data Processing</text>
  <text x="590" y="535" class="text-code">uri.to_string()</text>
  <text x="590" y="550" class="text-code">http_method.to_string()</text>

  <!-- Time Formatting -->
  <rect x="710" y="500" width="160" height="60" rx="5" class="stroke-primary rect-timing"/>
  <text x="790" y="520" class="text-box-title">Time Formatting</text>
  <text x="790" y="535" class="text-code">format_time(now)</text>
  <text x="790" y="550" class="text-code">format_time(time_in)</text>

  <!-- JSON Serialization -->
  <rect x="20" y="600" width="880" height="60" rx="5" class="stroke-primary rect-process"/>
  <text x="460" y="625" class="text-section">JSON Serialization</text>
  <text x="460" y="645" class="text-code">json!(log_line) - Convert RequestLogLine to serde_json::Value</text>

  <!-- Debug Output -->
  <rect x="20" y="700" width="880" height="60" rx="5" class="stroke-primary rect-layer"/>
  <text x="460" y="725" class="text-section">Debug Logging Output</text>
  <text x="460" y="745" class="text-code">debug!("REQUEST LOG LINE:\n{}", json!(log_line))</text>

  <!-- Future Cloud Integration -->
  <rect x="20" y="800" width="880" height="60" rx="5" class="stroke-dashed rect-sublayer"/>
  <text x="460" y="825" class="text-section">Future: Cloud Service Integration</text>
  <text x="460" y="845" class="text-small">TODO: CloudWatch delivery, batch processing, Parquet format</text>
</svg>
